// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(cuid())
  email              String        @unique
  username           String        @unique
  firstName          String        @map("first_name")
  lastName           String        @map("last_name")
  hashedPassword     String        @map("hashed_password")
  hashedRefreshToken String?       @map("hashed_refresh_token")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @default(now()) @map("updated_at")
  candidates         Candidate[]
  vacancies          Vacancy[]
  applications       Application[]
}

model Candidate {
  id           String        @id @default(cuid())
  firstName    String        @map("first_name")
  lastName     String        @map("last_name")
  phone        String?
  email        String        @unique
  position     String
  sex          Sex           @default(UNKNOWN)
  dateOfBirth  DateTime      @map("date_of_birth")
  imageUrl     String?       @map("image_url")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  resumes      Resume[]
  applications Application[]

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @map("created_by_id")
}

enum Sex {
  MALE
  FEMALE
  UNKNOWN
}

model Resume {
  id           String       @id @default(cuid())
  resumeTitle  String       @map("resume_title")
  resumeUrl    String       @map("resume_url")
  resumeFormat ResumeFormat @map("resume_format")
  candidate    Candidate    @relation(fields: [candidateId], references: [id])
  candidateId  String       @map("candidate_id")
}

enum ResumeFormat {
  DOCX
  PDF
}

model Vacancy {
  id           String        @id @default(cuid())
  title        String
  description  String
  minSalary    Int?          @map("min_salary")
  maxSalary    Int?          @map("max_salary")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  applications Application[]

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @map("created_by_id")
}

model Application {
  id                   String           @unique @default(cuid())
  telInterview         InterviewStatus? @map("tel_interview")
  telInterviewComment  String?          @map("tel_interview_comment")
  hrInterview          InterviewStatus? @map("hr_interview")
  hrInterviewComment   String?          @map("hr_interview_comment")
  techInterview        InterviewStatus? @map("tech_interview")
  techInterviewComment String?          @map("tech_interview_comment")
  testTask             TestTaskStatus?  @map("test_task")
  testTaskComment      String?          @map("test_task_comment")
  offer                Boolean?
  offerComment         String?          @map("offer_comment")
  jobStartComment      String?          @map("job_start_comment")
  refusalReason        RefusalReason?   @map("refusal_reason")
  refusalReasonComment String?          @map("refusal_reason_comment")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @default(now()) @map("updated_at")

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @map("created_by_id")

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String    @map("candidate_id")
  vacancy     Vacancy   @relation(fields: [vacancyId], references: [id])
  vacancyId   String    @map("vacancy_id")

  @@id([candidateId, vacancyId], name: "candidateId_vacancyId")
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  NOT_COMPLETED
}

enum TestTaskStatus {
  NOT_ASKED
  COMPLETED
  NOT_COMPLETED
  REFUSAL_TO_COMPLETE
}

enum RefusalReason {
  CANDIDATE_REFUSAL
  HR_REFUSAL
  TECH_REFUSAL
}
