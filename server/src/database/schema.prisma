// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String      @id @default(cuid())
  email              String      @unique
  username           String      @unique
  firstName          String
  lastName           String
  hashedPassword     String
  hashedRefreshToken String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @default(now())
  candidates         Candidate[]
  vacancies          Vacancy[]
}

model Candidate {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  phone        String?
  email        String        @unique
  position     String
  sex          Sex           @default(UNKNOWN)
  dateOfBirth  DateTime
  imageUrl     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  resumes      Resume[]
  applications Application[]
  user         User          @relation(fields: [userId], references: [id])
  userId       String
}

enum Sex {
  MALE
  FEMALE
  UNKNOWN
}

model Resume {
  id           String       @id @default(cuid())
  resumeTitle  String
  resumeUrl    String
  resumeFormat ResumeFormat
  candidate    Candidate    @relation(fields: [candidateId], references: [id])
  candidateId  String
}

enum ResumeFormat {
  DOCX
  PDF
}

model Vacancy {
  id           String        @id @default(cuid())
  title        String
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  applications Application[]
  user         User          @relation(fields: [userId], references: [id])
  userId       String
}

model Application {
  id                   String           @unique @default(cuid())
  telInterview         InterviewStatus?
  telInterviewComment  String?
  hrInterview          InterviewStatus?
  hrInterviewComment   String?
  techInterview        InterviewStatus?
  techInterviewComment String?
  testTask             TestTaskStatus?
  testTaskComment      String?
  offer                Boolean?
  offerComment         String?
  jobStartComment      String?
  refusalReason        RefusalReason?
  refusalReasonComment String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now())

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  vacancy     Vacancy   @relation(fields: [vacancyId], references: [id])
  vacancyId   String

  @@id([candidateId, vacancyId], name: "candidateId_vacancyId")
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  NOT_COMPLETED
}

enum TestTaskStatus {
  NOT_ASKED
  COMPLETED
  NOT_COMPLETED
  REFUSAL_TO_COMPLETE
}

enum RefusalReason {
  CANDIDATE_REFUSAL
  HR_REFUSAL
  TECH_REFUSAL
}
