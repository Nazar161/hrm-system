# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  email: String!
  username: String!
  firstName: String!
  lastName: String!
}

type SignResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type LogoutResponse {
  loggedOut: Boolean!
}

type Resume {
  id: ID!
  resumeTitle: String!
  resumeUrl: String!
  resumeFormat: ResumeFormat!
}

enum ResumeFormat {
  DOCX
  PDF
}

type ApplicationPreview {
  id: ID!
  candidateId: ID!
  candidateName: String!
  candidatePosition: String!
}

type Vacancy {
  id: ID!
  title: String!
  description: String!
  applications: [ApplicationPreview]
}

type Application {
  id: ID!
  telInterview: InterviewStatus
  telInterviewComment: String
  hrInterview: InterviewStatus
  hrInterviewComment: String
  techInterview: InterviewStatus
  techInterviewComment: String
  testTask: TestTaskStatus
  testTaskComment: String
  offer: Boolean
  offerComment: String
  jobStartComment: String
  refusalReason: RefusalReason
  refusalReasonComment: String
  createdAt: DateTime!
  updatedAt: DateTime!
  vacancy: Vacancy!
  candidate: Candidate!
}

"""The status of an interview."""
enum InterviewStatus {
  SCHEDULED
  COMPLETED
  NOT_COMPLETED
}

enum TestTaskStatus {
  NOT_ASKED
  COMPLETED
  NOT_COMPLETED
  REFUSAL_TO_COMPLETE
}

enum RefusalReason {
  CANDIDATE_REFUSAL
  HR_REFUSAL
  TECH_REFUSAL
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Candidate {
  id: ID!
  firstName: String!
  lastName: String!
  phone: String
  email: String!
  position: String!
  sex: Sex!
  dateOfBirth: DateTime!
  imageUrl: String
  resumes: [Resume]
  applications: [Application]
}

enum Sex {
  MALE
  FEMALE
  UNKNOWN
}

type MutateApplicationResponse {
  isSuccess: Boolean!
}

type Query {
  hello: String!
  candidates(last: Int): [Candidate!]!
  candidate(id: ID!): Candidate!
  resume(id: Int!): Resume!
  vacancy(id: ID!): Vacancy!
  vacancies(last: Int): [Vacancy!]!
  application(id: ID!): Application!
}

type Mutation {
  signUp(signUpInput: SignUpInput!): SignResponse!
  signIn(signInInput: SignInInput!): SignResponse!
  logout(userId: String!): LogoutResponse!
  getNewTokens: SignResponse!
  createCandidate(createCandidateInput: CreateCandidateInput!): Candidate!
  updateCandidate(updateCandidateInput: UpdateCandidateInput!): Candidate!
  removeCandidate(id: ID!): Candidate!
  removeResume(id: Int!): Resume!
  createVacancy(createVacancyInput: CreateVacancyInput!): Vacancy!
  createApplication(createApplicationInput: CreateApplicationInput!): MutateApplicationResponse!
  updateApplication(updateApplicationInput: UpdateApplicationInput!): Application!
}

input SignUpInput {
  email: String!
  username: String!
  firstName: String!
  lastName: String!
  password: String!
}

input SignInInput {
  email: String!
  password: String!
}

input CreateCandidateInput {
  firstName: String!
  lastName: String!
  phone: String
  email: String!
  position: String!
  sex: Sex!
  dateOfBirth: DateTime!
}

input UpdateCandidateInput {
  firstName: String
  lastName: String
  phone: String
  email: String
  position: String
  sex: Sex
  dateOfBirth: DateTime
  id: ID!
}

input CreateVacancyInput {
  title: String!
  description: String!
}

input CreateApplicationInput {
  vacancyId: ID!
  candidateId: ID!
}

input UpdateApplicationInput {
  id: String!
  telInterview: InterviewStatus
  telInterviewComment: String
  hrInterview: InterviewStatus
  hrInterviewComment: String
  techInterview: InterviewStatus
  techInterviewComment: String
  testTask: TestTaskStatus
  testTaskComment: String
  offer: Boolean
  offerComment: String
  jobStartComment: String
  refusalReason: RefusalReason
  refusalReasonComment: String
}